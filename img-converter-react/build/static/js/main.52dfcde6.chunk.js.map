{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","file","ext","formState","setFormState","parseFilename","fileName","name","fileNameArr","split","slice","length","push","join","onSubmit","event","a","preventDefault","formData","FormData","console","group","log","size","append","fetch","method","body","then","res","blob","data","status","url","window","URL","createObjectURL","document","createElement","style","display","href","download","appendChild","click","removeChild","revokeObjectURL","p","error","catch","err","groupEnd","className","htmlFor","onChange","target","files","type","id","value","flexDirection","alignItems","color","disabled","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.52dfcde6.chunk.js","sourcesContent":["import React, {FormEvent} from 'react';\n\nfunction App() {\n\n    interface iFormState {\n        file: File | null;\n        ext: string;\n    }\n\n    const [formState, setFormState] = React.useState<iFormState>({\n        file: null,\n        ext: ''\n    });\n\n    const onChange = (event: FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement\n        setFormState(p => ({\n            ...p,\n            [target.name]: target.value\n        }))\n    }\n\n    const onFileChange = (event: FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement\n        const file = target.files ? target.files[0] as File : null\n        setFormState(p => ({\n            ...p,\n            file: file\n        }))\n    }\n\n    const parseFilename = () => {\n        let fileName = formState.file?.name ?? 'image.image'\n        let fileNameArr = fileName.split('.')\n            .slice(0, fileName.split('.').length - 1)\n        fileNameArr.push(formState.ext)\n        return fileNameArr.join('.')\n    }\n\n    const onSubmit = async (event: FormEvent) => {\n        event.preventDefault()\n        if (!formState.file || !formState.ext.length) return;\n        let formData = new FormData();\n        console.group(\"File Submit/Download\");\n        console.log(`Before size: ${formState.file?.size}`);\n        formData.append('ext', formState.ext ?? '');\n        formData.append('image', formState.file, formState.file.name);\n        await fetch(`/convert`, {\n            method: 'post',\n            body: formData,\n        }).then(res => res.blob().then(data => {\n                if (res.status === 200) {\n                    console.log(`After size: ${data.size}`)\n                    const url = window.URL.createObjectURL(data);\n                    const a = document.createElement('a');\n                    a.style.display = 'none';\n                    a.href = url;\n                    a.download = parseFilename();\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                    window.URL.revokeObjectURL(url);\n                } else if (res.status === 400) {\n                    setFormState(p => ({\n                        ...p,\n                        ext: 'Invalid File Extension'\n                    }));\n                } else {\n                    console.error(res);\n                }\n            }\n        )).catch(err => {\n            console.error(err);\n        });\n        console.groupEnd();\n    }\n\n    return (\n        <div className=\"App\">\n            <form onSubmit={onSubmit} className={'form'}>\n                <h1>Convert Image:</h1>\n                <div className='form-control'>\n                    <label htmlFor={'file'}>Image File: </label>\n                    <input onChange={onFileChange}\n                           type=\"file\" name=\"file\"\n                           id=\"file\"/>\n                </div>\n                <div className='form-control'>\n                    <label htmlFor={'ext'}>Extension: </label>\n                    <input onChange={onChange}\n                           type=\"ext\" name=\"ext\"\n                           id=\"ext\"/>\n                </div>\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n                    {formState.ext.length > 5 &&\n                    <small style={{color: 'firebrick'}}>'Invalid File Extension'</small>}\n                    <input type=\"submit\" value=\"Convert\" disabled={formState.ext.length > 5}/>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}