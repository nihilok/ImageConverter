{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","file","ext","formState","setFormState","onSubmit","event","a","preventDefault","formData","FormData","console","group","log","size","append","name","fetch","method","body","then","res","blob","data","status","url","window","URL","createObjectURL","document","createElement","style","display","href","fileName","fileNameArr","split","slice","length","push","join","download","appendChild","click","removeChild","revokeObjectURL","p","error","catch","err","groupEnd","className","htmlFor","onChange","target","files","type","id","value","flexDirection","alignItems","color","disabled","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fbf21e68.chunk.js","sourcesContent":["import React, {FormEvent} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n    interface iFormState {\n        file: File | null;\n        ext: string;\n    }\n\n    const [formState, setFormState] = React.useState<iFormState>({\n        file: null,\n        ext: ''\n    });\n\n    const onChange = (event: FormEvent<HTMLInputElement>) => {\n        const target = event.target as HTMLInputElement\n        setFormState(p => ({\n            ...p,\n            [target.name]: target.value\n        }))\n    }\n\n    const onFileChange = (event: FormEvent<HTMLInputElement>) => {\n\n        const target = event.target as HTMLInputElement\n        const file = target.files ? target.files[0] as File : null\n\n        setFormState(p => ({\n            ...p,\n            file: file\n        }))\n    }\n\n    const onSubmit = async (event: FormEvent) => {\n        event.preventDefault()\n        let formData = new FormData()\n        console.group(\"File Submit/Download\")\n        console.log(`Before size: ${formState.file?.size}`)\n        formData.append('ext', formState.ext ?? '')\n        if (formState.file) {\n            formData.append('image', formState.file, formState.file.name)\n        }\n        await fetch(`/convert`, {\n            method: 'post',\n            body: formData,\n        }).then(res => res.blob().then(data => {\n                if (res.status === 200) {\n                    console.log(`After size: ${data.size}`)\n                    const url = window.URL.createObjectURL(data);\n                    const a = document.createElement('a');\n                    a.style.display = 'none';\n                    a.href = url;\n                    let fileName = formState.file?.name ?? 'image.image'\n                    let fileNameArr = fileName.split('.').slice(0, fileName.split('.').length - 1)\n                    fileNameArr.push(formState.ext)\n                    fileName = fileNameArr.join('.')\n                    a.download = fileName;\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                    window.URL.revokeObjectURL(url);\n                } else if (res.status === 400) {\n                    setFormState(p => ({\n                        ...p,\n                        ext: 'Invalid File Extension'\n                    }))\n                } else {\n                    console.error(res)\n                }\n            }\n        )).catch(err => {\n            console.error(err)\n        })\n        console.groupEnd()\n    }\n\n    return (\n        <div className=\"App\">\n            <form onSubmit={onSubmit} className={'form'}>\n                <h1>Convert Image:</h1>\n                <div className='form-control'><label htmlFor={'file'}>Image File: </label><input onChange={onFileChange}\n                                                                                                 type=\"file\" name=\"file\"\n                                                                                                 id=\"file\"/></div>\n                <div className='form-control'><label htmlFor={'ext'}>Extension: </label><input onChange={onChange}\n                                                                                               type=\"ext\" name=\"ext\"\n                                                                                               id=\"ext\"/></div>\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n                    {formState.ext.length > 5 && <small style={{color: 'firebrick'}}>'Invalid File Extension'</small>}\n                    <input type=\"submit\" value=\"Convert\" disabled={formState.ext.length > 5}/></div>\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}